	Session.vim	/^nnoremap  $/;"	m
		Session.vim	/^inoremap <silent> 	 =UltiSnips#ExpandSnippet()$/;"	m
		Session.vim	/^nnoremap 	 :b# $/;"	m
	Session.vim	/^imap <buffer>   <Plug>doorboy_space$/;"	m
	Session.vim	/^map    <Plug>(easymotion-prefix)$/;"	m
	Session.vim	/^nnoremap  3 :! cd ~\/Desktop\/Workspace\/327 && git add . && git commit -m "autocmmit" && git push origin master$/;"	m
	Session.vim	/^nnoremap  f :FZF ~\/Desktop\/Workspace $/;"	m
	Session.vim	/^nnoremap  $/;"	m
	Session.vim	/^nnoremap  $/;"	m
	Session.vim	/^imap <buffer> $/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
+	Session.vim	/^nnoremap + +$/;"	m
-	Session.vim	/^nnoremap - -$/;"	m
013|	Session.vim	/^normal! 013|$/;"	m
034|	Session.vim	/^normal! 034|$/;"	m
<BS>	Session.vim	/^imap <buffer> <BS> <Plug>doorboy_bs$/;"	m
<C-Tab>	Session.vim	/^inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()$/;"	m
<D-c>	Session.vim	/^vmap <D-c> "*y$/;"	m
<D-v>	Session.vim	/^map! <D-v> *$/;"	m
<D-v>	Session.vim	/^nmap <D-v> "*P$/;"	m
<D-v>	Session.vim	/^vmap <D-v> "-d"*P$/;"	m
<D-x>	Session.vim	/^vmap <D-x> "*d$/;"	m
<F5>	Session.vim	/^nnoremap <F5> :buffers$/;"	m
<F6>	Session.vim	/^nmap <F6> : call Execute_c()$/;"	m
<F8>	Session.vim	/^nmap <F8> :call Program_set()$/;"	m
<NL>	Session.vim	/^nnoremap <NL> <NL>$/;"	m
<Plug>(ale_complete)	Session.vim	/^inoremap <silent> <Plug>(ale_complete) :ALEComplete$/;"	m
<Plug>(ale_detail)	Session.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail$/;"	m
<Plug>(ale_disable)	Session.vim	/^nnoremap <silent> <Plug>(ale_disable) :ALEDisable$/;"	m
<Plug>(ale_disable_buffer)	Session.vim	/^nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer$/;"	m
<Plug>(ale_documentation)	Session.vim	/^nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation$/;"	m
<Plug>(ale_enable)	Session.vim	/^nnoremap <silent> <Plug>(ale_enable) :ALEEnable$/;"	m
<Plug>(ale_enable_buffer)	Session.vim	/^nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer$/;"	m
<Plug>(ale_find_references)	Session.vim	/^nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences$/;"	m
<Plug>(ale_first)	Session.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst$/;"	m
<Plug>(ale_fix)	Session.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix$/;"	m
<Plug>(ale_go_to_definition)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition$/;"	m
<Plug>(ale_go_to_definition_in_split)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinitionInSplit$/;"	m
<Plug>(ale_go_to_definition_in_tab)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinitionInTab$/;"	m
<Plug>(ale_go_to_definition_in_vsplit)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinitionInVSplit$/;"	m
<Plug>(ale_go_to_type_definition)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition$/;"	m
<Plug>(ale_go_to_type_definition_in_split)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinitionInSplit$/;"	m
<Plug>(ale_go_to_type_definition_in_tab)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinitionInTab$/;"	m
<Plug>(ale_go_to_type_definition_in_vsplit)	Session.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinitionInVSplit$/;"	m
<Plug>(ale_hover)	Session.vim	/^nnoremap <silent> <Plug>(ale_hover) :ALEHover$/;"	m
<Plug>(ale_last)	Session.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast$/;"	m
<Plug>(ale_lint)	Session.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint$/;"	m
<Plug>(ale_next)	Session.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext$/;"	m
<Plug>(ale_next_error)	Session.vim	/^nnoremap <silent> <Plug>(ale_next_error) :ALENext -error$/;"	m
<Plug>(ale_next_warning)	Session.vim	/^nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning$/;"	m
<Plug>(ale_next_wrap)	Session.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap$/;"	m
<Plug>(ale_next_wrap_error)	Session.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error$/;"	m
<Plug>(ale_next_wrap_warning)	Session.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning$/;"	m
<Plug>(ale_previous)	Session.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious$/;"	m
<Plug>(ale_previous_error)	Session.vim	/^nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error$/;"	m
<Plug>(ale_previous_warning)	Session.vim	/^nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning$/;"	m
<Plug>(ale_previous_wrap)	Session.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap$/;"	m
<Plug>(ale_previous_wrap_error)	Session.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error$/;"	m
<Plug>(ale_previous_wrap_warning)	Session.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning$/;"	m
<Plug>(ale_reset)	Session.vim	/^nnoremap <silent> <Plug>(ale_reset) :ALEReset$/;"	m
<Plug>(ale_reset_buffer)	Session.vim	/^nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer$/;"	m
<Plug>(ale_toggle)	Session.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle$/;"	m
<Plug>(ale_toggle_buffer)	Session.vim	/^nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer$/;"	m
<Plug>(easymotion-B)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-B) :call EasyMotion#WBW(0,1)$/;"	m
<Plug>(easymotion-B)	Session.vim	/^onoremap <silent> <Plug>(easymotion-B) :call EasyMotion#WBW(0,1)$/;"	m
<Plug>(easymotion-E)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-E) :call EasyMotion#EW(0,0)$/;"	m
<Plug>(easymotion-E)	Session.vim	/^onoremap <silent> <Plug>(easymotion-E) :call EasyMotion#EW(0,0)$/;"	m
<Plug>(easymotion-F)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-F) :call EasyMotion#S(1,0,1)$/;"	m
<Plug>(easymotion-F)	Session.vim	/^onoremap <silent> <Plug>(easymotion-F) :call EasyMotion#S(1,0,1)$/;"	m
<Plug>(easymotion-F2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-F2) :call EasyMotion#S(2,0,1)$/;"	m
<Plug>(easymotion-F2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-F2) :call EasyMotion#S(2,0,1)$/;"	m
<Plug>(easymotion-Fl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Fl) :call EasyMotion#SL(1,0,1)$/;"	m
<Plug>(easymotion-Fl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Fl) :call EasyMotion#SL(1,0,1)$/;"	m
<Plug>(easymotion-Fl2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Fl2) :call EasyMotion#SL(2,0,1)$/;"	m
<Plug>(easymotion-Fl2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Fl2) :call EasyMotion#SL(2,0,1)$/;"	m
<Plug>(easymotion-Fln)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Fln) :call EasyMotion#SL(-1,0,1)$/;"	m
<Plug>(easymotion-Fln)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Fln) :call EasyMotion#SL(-1,0,1)$/;"	m
<Plug>(easymotion-Fn)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Fn) :call EasyMotion#S(-1,0,1)$/;"	m
<Plug>(easymotion-Fn)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Fn) :call EasyMotion#S(-1,0,1)$/;"	m
<Plug>(easymotion-N)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-N) :call EasyMotion#Search(0,1,0)$/;"	m
<Plug>(easymotion-N)	Session.vim	/^onoremap <silent> <Plug>(easymotion-N) :call EasyMotion#Search(0,1,0)$/;"	m
<Plug>(easymotion-T)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-T) :call EasyMotion#T(1,0,1)$/;"	m
<Plug>(easymotion-T)	Session.vim	/^onoremap <silent> <Plug>(easymotion-T) :call EasyMotion#T(1,0,1)$/;"	m
<Plug>(easymotion-T2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-T2) :call EasyMotion#T(2,0,1)$/;"	m
<Plug>(easymotion-T2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-T2) :call EasyMotion#T(2,0,1)$/;"	m
<Plug>(easymotion-Tl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Tl) :call EasyMotion#TL(1,0,1)$/;"	m
<Plug>(easymotion-Tl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Tl) :call EasyMotion#TL(1,0,1)$/;"	m
<Plug>(easymotion-Tl2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Tl2) :call EasyMotion#TL(2,0,1)$/;"	m
<Plug>(easymotion-Tl2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Tl2) :call EasyMotion#TL(2,0,1)$/;"	m
<Plug>(easymotion-Tln)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Tln) :call EasyMotion#TL(-1,0,1)$/;"	m
<Plug>(easymotion-Tln)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Tln) :call EasyMotion#TL(-1,0,1)$/;"	m
<Plug>(easymotion-Tn)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-Tn) :call EasyMotion#T(-1,0,1)$/;"	m
<Plug>(easymotion-Tn)	Session.vim	/^onoremap <silent> <Plug>(easymotion-Tn) :call EasyMotion#T(-1,0,1)$/;"	m
<Plug>(easymotion-W)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-W) :call EasyMotion#WBW(0,0)$/;"	m
<Plug>(easymotion-W)	Session.vim	/^onoremap <silent> <Plug>(easymotion-W) :call EasyMotion#WBW(0,0)$/;"	m
<Plug>(easymotion-activate)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-activate) :call EasyMotion#activate(0)$/;"	m
<Plug>(easymotion-activate)	Session.vim	/^onoremap <silent> <Plug>(easymotion-activate) :call EasyMotion#activate(0)$/;"	m
<Plug>(easymotion-b)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-b) :call EasyMotion#WB(0,1)$/;"	m
<Plug>(easymotion-b)	Session.vim	/^onoremap <silent> <Plug>(easymotion-b) :call EasyMotion#WB(0,1)$/;"	m
<Plug>(easymotion-bd-E)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-E) :call EasyMotion#EW(0,2)$/;"	m
<Plug>(easymotion-bd-E)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-E) :call EasyMotion#EW(0,2)$/;"	m
<Plug>(easymotion-bd-W)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-W) :call EasyMotion#WBW(0,2)$/;"	m
<Plug>(easymotion-bd-W)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-W) :call EasyMotion#WBW(0,2)$/;"	m
<Plug>(easymotion-bd-e)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-e) :call EasyMotion#E(0,2)$/;"	m
<Plug>(easymotion-bd-e)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-e) :call EasyMotion#E(0,2)$/;"	m
<Plug>(easymotion-bd-el)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-el) :call EasyMotion#EL(0,2)$/;"	m
<Plug>(easymotion-bd-el)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-el) :call EasyMotion#EL(0,2)$/;"	m
<Plug>(easymotion-bd-f)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-f) :call EasyMotion#S(1,0,2)$/;"	m
<Plug>(easymotion-bd-f)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-f) :call EasyMotion#S(1,0,2)$/;"	m
<Plug>(easymotion-bd-f2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-f2) :call EasyMotion#S(2,0,2)$/;"	m
<Plug>(easymotion-bd-f2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-f2) :call EasyMotion#S(2,0,2)$/;"	m
<Plug>(easymotion-bd-fl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-fl) :call EasyMotion#SL(1,0,2)$/;"	m
<Plug>(easymotion-bd-fl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-fl) :call EasyMotion#SL(1,0,2)$/;"	m
<Plug>(easymotion-bd-fl2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-fl2) :call EasyMotion#SL(2,0,2)$/;"	m
<Plug>(easymotion-bd-fl2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-fl2) :call EasyMotion#SL(2,0,2)$/;"	m
<Plug>(easymotion-bd-fln)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-fln) :call EasyMotion#SL(-1,0,2)$/;"	m
<Plug>(easymotion-bd-fln)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-fln) :call EasyMotion#SL(-1,0,2)$/;"	m
<Plug>(easymotion-bd-fn)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-fn) :call EasyMotion#S(-1,0,2)$/;"	m
<Plug>(easymotion-bd-fn)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-fn) :call EasyMotion#S(-1,0,2)$/;"	m
<Plug>(easymotion-bd-jk)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-jk) :call EasyMotion#JK(0,2)$/;"	m
<Plug>(easymotion-bd-jk)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-jk) :call EasyMotion#JK(0,2)$/;"	m
<Plug>(easymotion-bd-n)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-n) :call EasyMotion#Search(0,2,0)$/;"	m
<Plug>(easymotion-bd-n)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-n) :call EasyMotion#Search(0,2,0)$/;"	m
<Plug>(easymotion-bd-t)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-t) :call EasyMotion#T(1,0,2)$/;"	m
<Plug>(easymotion-bd-t)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-t) :call EasyMotion#T(1,0,2)$/;"	m
<Plug>(easymotion-bd-t2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-t2) :call EasyMotion#T(2,0,2)$/;"	m
<Plug>(easymotion-bd-t2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-t2) :call EasyMotion#T(2,0,2)$/;"	m
<Plug>(easymotion-bd-tl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-tl) :call EasyMotion#TL(1,0,2)$/;"	m
<Plug>(easymotion-bd-tl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-tl) :call EasyMotion#TL(1,0,2)$/;"	m
<Plug>(easymotion-bd-tl2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-tl2) :call EasyMotion#TL(2,0,2)$/;"	m
<Plug>(easymotion-bd-tl2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-tl2) :call EasyMotion#TL(2,0,2)$/;"	m
<Plug>(easymotion-bd-tln)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-tln) :call EasyMotion#TL(-1,0,2)$/;"	m
<Plug>(easymotion-bd-tln)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-tln) :call EasyMotion#TL(-1,0,2)$/;"	m
<Plug>(easymotion-bd-tn)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-tn) :call EasyMotion#T(-1,0,2)$/;"	m
<Plug>(easymotion-bd-tn)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-tn) :call EasyMotion#T(-1,0,2)$/;"	m
<Plug>(easymotion-bd-w)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-w) :call EasyMotion#WB(0,2)$/;"	m
<Plug>(easymotion-bd-w)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-w) :call EasyMotion#WB(0,2)$/;"	m
<Plug>(easymotion-bd-wl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bd-wl) :call EasyMotion#WBL(0,2)$/;"	m
<Plug>(easymotion-bd-wl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bd-wl) :call EasyMotion#WBL(0,2)$/;"	m
<Plug>(easymotion-bl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-bl) :call EasyMotion#WBL(0,1)$/;"	m
<Plug>(easymotion-bl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-bl) :call EasyMotion#WBL(0,1)$/;"	m
<Plug>(easymotion-dotrepeat)	Session.vim	/^noremap <silent> <Plug>(easymotion-dotrepeat) :call EasyMotion#DotRepeat()$/;"	m
<Plug>(easymotion-e)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-e) :call EasyMotion#E(0,0)$/;"	m
<Plug>(easymotion-e)	Session.vim	/^onoremap <silent> <Plug>(easymotion-e) :call EasyMotion#E(0,0)$/;"	m
<Plug>(easymotion-el)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-el) :call EasyMotion#EL(0,0)$/;"	m
<Plug>(easymotion-el)	Session.vim	/^onoremap <silent> <Plug>(easymotion-el) :call EasyMotion#EL(0,0)$/;"	m
<Plug>(easymotion-eol-bd-jk)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-eol-bd-jk) :call EasyMotion#Eol(0,2)$/;"	m
<Plug>(easymotion-eol-bd-jk)	Session.vim	/^onoremap <silent> <Plug>(easymotion-eol-bd-jk) :call EasyMotion#Eol(0,2)$/;"	m
<Plug>(easymotion-eol-j)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-eol-j) :call EasyMotion#Eol(0,0)$/;"	m
<Plug>(easymotion-eol-j)	Session.vim	/^onoremap <silent> <Plug>(easymotion-eol-j) :call EasyMotion#Eol(0,0)$/;"	m
<Plug>(easymotion-eol-k)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-eol-k) :call EasyMotion#Eol(0,1)$/;"	m
<Plug>(easymotion-eol-k)	Session.vim	/^onoremap <silent> <Plug>(easymotion-eol-k) :call EasyMotion#Eol(0,1)$/;"	m
<Plug>(easymotion-f)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-f) :call EasyMotion#S(1,0,0)$/;"	m
<Plug>(easymotion-f)	Session.vim	/^onoremap <silent> <Plug>(easymotion-f) :call EasyMotion#S(1,0,0)$/;"	m
<Plug>(easymotion-f2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-f2) :call EasyMotion#S(2,0,0)$/;"	m
<Plug>(easymotion-f2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-f2) :call EasyMotion#S(2,0,0)$/;"	m
<Plug>(easymotion-fl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-fl) :call EasyMotion#SL(1,0,0)$/;"	m
<Plug>(easymotion-fl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-fl) :call EasyMotion#SL(1,0,0)$/;"	m
<Plug>(easymotion-fl2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-fl2) :call EasyMotion#SL(2,0,0)$/;"	m
<Plug>(easymotion-fl2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-fl2) :call EasyMotion#SL(2,0,0)$/;"	m
<Plug>(easymotion-fln)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-fln) :call EasyMotion#SL(-1,0,0)$/;"	m
<Plug>(easymotion-fln)	Session.vim	/^onoremap <silent> <Plug>(easymotion-fln) :call EasyMotion#SL(-1,0,0)$/;"	m
<Plug>(easymotion-fn)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-fn) :call EasyMotion#S(-1,0,0)$/;"	m
<Plug>(easymotion-fn)	Session.vim	/^onoremap <silent> <Plug>(easymotion-fn) :call EasyMotion#S(-1,0,0)$/;"	m
<Plug>(easymotion-gE)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-gE) :call EasyMotion#EW(0,1)$/;"	m
<Plug>(easymotion-gE)	Session.vim	/^onoremap <silent> <Plug>(easymotion-gE) :call EasyMotion#EW(0,1)$/;"	m
<Plug>(easymotion-ge)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-ge) :call EasyMotion#E(0,1)$/;"	m
<Plug>(easymotion-ge)	Session.vim	/^onoremap <silent> <Plug>(easymotion-ge) :call EasyMotion#E(0,1)$/;"	m
<Plug>(easymotion-gel)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-gel) :call EasyMotion#EL(0,1)$/;"	m
<Plug>(easymotion-gel)	Session.vim	/^onoremap <silent> <Plug>(easymotion-gel) :call EasyMotion#EL(0,1)$/;"	m
<Plug>(easymotion-iskeyword-b)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-iskeyword-b) :call EasyMotion#WBK(0,1)$/;"	m
<Plug>(easymotion-iskeyword-b)	Session.vim	/^onoremap <silent> <Plug>(easymotion-iskeyword-b) :call EasyMotion#WBK(0,1)$/;"	m
<Plug>(easymotion-iskeyword-bd-e)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-iskeyword-bd-e) :call EasyMotion#EK(0,2)$/;"	m
<Plug>(easymotion-iskeyword-bd-e)	Session.vim	/^onoremap <silent> <Plug>(easymotion-iskeyword-bd-e) :call EasyMotion#EK(0,2)$/;"	m
<Plug>(easymotion-iskeyword-bd-w)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-iskeyword-bd-w) :call EasyMotion#WBK(0,2)$/;"	m
<Plug>(easymotion-iskeyword-bd-w)	Session.vim	/^onoremap <silent> <Plug>(easymotion-iskeyword-bd-w) :call EasyMotion#WBK(0,2)$/;"	m
<Plug>(easymotion-iskeyword-e)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-iskeyword-e) :call EasyMotion#EK(0,0)$/;"	m
<Plug>(easymotion-iskeyword-e)	Session.vim	/^onoremap <silent> <Plug>(easymotion-iskeyword-e) :call EasyMotion#EK(0,0)$/;"	m
<Plug>(easymotion-iskeyword-ge)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-iskeyword-ge) :call EasyMotion#EK(0,1)$/;"	m
<Plug>(easymotion-iskeyword-ge)	Session.vim	/^onoremap <silent> <Plug>(easymotion-iskeyword-ge) :call EasyMotion#EK(0,1)$/;"	m
<Plug>(easymotion-iskeyword-w)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-iskeyword-w) :call EasyMotion#WBK(0,0)$/;"	m
<Plug>(easymotion-iskeyword-w)	Session.vim	/^onoremap <silent> <Plug>(easymotion-iskeyword-w) :call EasyMotion#WBK(0,0)$/;"	m
<Plug>(easymotion-j)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-j) :call EasyMotion#JK(0,0)$/;"	m
<Plug>(easymotion-j)	Session.vim	/^onoremap <silent> <Plug>(easymotion-j) :call EasyMotion#JK(0,0)$/;"	m
<Plug>(easymotion-jumptoanywhere)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-jumptoanywhere) :call EasyMotion#JumpToAnywhere(0,2)$/;"	m
<Plug>(easymotion-jumptoanywhere)	Session.vim	/^onoremap <silent> <Plug>(easymotion-jumptoanywhere) :call EasyMotion#JumpToAnywhere(0,2)$/;"	m
<Plug>(easymotion-k)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-k) :call EasyMotion#JK(0,1)$/;"	m
<Plug>(easymotion-k)	Session.vim	/^onoremap <silent> <Plug>(easymotion-k) :call EasyMotion#JK(0,1)$/;"	m
<Plug>(easymotion-lineanywhere)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-lineanywhere) :call EasyMotion#LineAnywhere(0,2)$/;"	m
<Plug>(easymotion-lineanywhere)	Session.vim	/^onoremap <silent> <Plug>(easymotion-lineanywhere) :call EasyMotion#LineAnywhere(0,2)$/;"	m
<Plug>(easymotion-linebackward)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-linebackward) :call EasyMotion#LineAnywhere(0,1)$/;"	m
<Plug>(easymotion-linebackward)	Session.vim	/^onoremap <silent> <Plug>(easymotion-linebackward) :call EasyMotion#LineAnywhere(0,1)$/;"	m
<Plug>(easymotion-lineforward)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-lineforward) :call EasyMotion#LineAnywhere(0,0)$/;"	m
<Plug>(easymotion-lineforward)	Session.vim	/^onoremap <silent> <Plug>(easymotion-lineforward) :call EasyMotion#LineAnywhere(0,0)$/;"	m
<Plug>(easymotion-n)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-n) :call EasyMotion#Search(0,0,0)$/;"	m
<Plug>(easymotion-n)	Session.vim	/^onoremap <silent> <Plug>(easymotion-n) :call EasyMotion#Search(0,0,0)$/;"	m
<Plug>(easymotion-next)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-next) :call EasyMotion#NextPrevious(0,0)$/;"	m
<Plug>(easymotion-next)	Session.vim	/^onoremap <silent> <Plug>(easymotion-next) :call EasyMotion#NextPrevious(0,0)$/;"	m
<Plug>(easymotion-overwin-f)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-f) :call EasyMotion#OverwinF(1)$/;"	m
<Plug>(easymotion-overwin-f2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-f2) :call EasyMotion#OverwinF(2)$/;"	m
<Plug>(easymotion-overwin-line)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-line) :call EasyMotion#overwin#line()$/;"	m
<Plug>(easymotion-overwin-w)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-w) :call EasyMotion#overwin#w()$/;"	m
<Plug>(easymotion-prefix)B	Session.vim	/^map <silent> <Plug>(easymotion-prefix)B <Plug>(easymotion-B)$/;"	m
<Plug>(easymotion-prefix)E	Session.vim	/^map <silent> <Plug>(easymotion-prefix)E <Plug>(easymotion-E)$/;"	m
<Plug>(easymotion-prefix)F	Session.vim	/^map <silent> <Plug>(easymotion-prefix)F <Plug>(easymotion-F)$/;"	m
<Plug>(easymotion-prefix)N	Session.vim	/^map <silent> <Plug>(easymotion-prefix)N <Plug>(easymotion-N)$/;"	m
<Plug>(easymotion-prefix)T	Session.vim	/^map <silent> <Plug>(easymotion-prefix)T <Plug>(easymotion-T)$/;"	m
<Plug>(easymotion-prefix)W	Session.vim	/^map <silent> <Plug>(easymotion-prefix)W <Plug>(easymotion-W)$/;"	m
<Plug>(easymotion-prefix)b	Session.vim	/^map <silent> <Plug>(easymotion-prefix)b <Plug>(easymotion-b)$/;"	m
<Plug>(easymotion-prefix)e	Session.vim	/^map <silent> <Plug>(easymotion-prefix)e <Plug>(easymotion-e)$/;"	m
<Plug>(easymotion-prefix)f	Session.vim	/^map <silent> <Plug>(easymotion-prefix)f <Plug>(easymotion-f)$/;"	m
<Plug>(easymotion-prefix)gE	Session.vim	/^map <silent> <Plug>(easymotion-prefix)gE <Plug>(easymotion-gE)$/;"	m
<Plug>(easymotion-prefix)ge	Session.vim	/^map <silent> <Plug>(easymotion-prefix)ge <Plug>(easymotion-ge)$/;"	m
<Plug>(easymotion-prefix)j	Session.vim	/^map <silent> <Plug>(easymotion-prefix)j <Plug>(easymotion-j)$/;"	m
<Plug>(easymotion-prefix)k	Session.vim	/^map <silent> <Plug>(easymotion-prefix)k <Plug>(easymotion-k)$/;"	m
<Plug>(easymotion-prefix)n	Session.vim	/^map <silent> <Plug>(easymotion-prefix)n <Plug>(easymotion-n)$/;"	m
<Plug>(easymotion-prefix)s	Session.vim	/^map <silent> <Plug>(easymotion-prefix)s <Plug>(easymotion-s)$/;"	m
<Plug>(easymotion-prefix)t	Session.vim	/^map <silent> <Plug>(easymotion-prefix)t <Plug>(easymotion-t)$/;"	m
<Plug>(easymotion-prefix)w	Session.vim	/^map <silent> <Plug>(easymotion-prefix)w <Plug>(easymotion-w)$/;"	m
<Plug>(easymotion-prev)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-prev) :call EasyMotion#NextPrevious(0,1)$/;"	m
<Plug>(easymotion-prev)	Session.vim	/^onoremap <silent> <Plug>(easymotion-prev) :call EasyMotion#NextPrevious(0,1)$/;"	m
<Plug>(easymotion-repeat)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-repeat) :call EasyMotion#Repeat(0)$/;"	m
<Plug>(easymotion-repeat)	Session.vim	/^onoremap <silent> <Plug>(easymotion-repeat) :call EasyMotion#Repeat(0)$/;"	m
<Plug>(easymotion-s)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-s) :call EasyMotion#S(1,0,2)$/;"	m
<Plug>(easymotion-s)	Session.vim	/^onoremap <silent> <Plug>(easymotion-s) :call EasyMotion#S(1,0,2)$/;"	m
<Plug>(easymotion-s2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-s2) :call EasyMotion#S(2,0,2)$/;"	m
<Plug>(easymotion-s2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-s2) :call EasyMotion#S(2,0,2)$/;"	m
<Plug>(easymotion-sl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-sl) :call EasyMotion#SL(1,0,2)$/;"	m
<Plug>(easymotion-sl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-sl) :call EasyMotion#SL(1,0,2)$/;"	m
<Plug>(easymotion-sl2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-sl2) :call EasyMotion#SL(2,0,2)$/;"	m
<Plug>(easymotion-sl2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-sl2) :call EasyMotion#SL(2,0,2)$/;"	m
<Plug>(easymotion-sln)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-sln) :call EasyMotion#SL(-1,0,2)$/;"	m
<Plug>(easymotion-sln)	Session.vim	/^onoremap <silent> <Plug>(easymotion-sln) :call EasyMotion#SL(-1,0,2)$/;"	m
<Plug>(easymotion-sn)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-sn) :call EasyMotion#S(-1,0,2)$/;"	m
<Plug>(easymotion-sn)	Session.vim	/^onoremap <silent> <Plug>(easymotion-sn) :call EasyMotion#S(-1,0,2)$/;"	m
<Plug>(easymotion-sol-bd-jk)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-sol-bd-jk) :call EasyMotion#Sol(0,2)$/;"	m
<Plug>(easymotion-sol-bd-jk)	Session.vim	/^onoremap <silent> <Plug>(easymotion-sol-bd-jk) :call EasyMotion#Sol(0,2)$/;"	m
<Plug>(easymotion-sol-j)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-sol-j) :call EasyMotion#Sol(0,0)$/;"	m
<Plug>(easymotion-sol-j)	Session.vim	/^onoremap <silent> <Plug>(easymotion-sol-j) :call EasyMotion#Sol(0,0)$/;"	m
<Plug>(easymotion-sol-k)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-sol-k) :call EasyMotion#Sol(0,1)$/;"	m
<Plug>(easymotion-sol-k)	Session.vim	/^onoremap <silent> <Plug>(easymotion-sol-k) :call EasyMotion#Sol(0,1)$/;"	m
<Plug>(easymotion-t)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-t) :call EasyMotion#T(1,0,0)$/;"	m
<Plug>(easymotion-t)	Session.vim	/^onoremap <silent> <Plug>(easymotion-t) :call EasyMotion#T(1,0,0)$/;"	m
<Plug>(easymotion-t2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-t2) :call EasyMotion#T(2,0,0)$/;"	m
<Plug>(easymotion-t2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-t2) :call EasyMotion#T(2,0,0)$/;"	m
<Plug>(easymotion-tl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-tl) :call EasyMotion#TL(1,0,0)$/;"	m
<Plug>(easymotion-tl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-tl) :call EasyMotion#TL(1,0,0)$/;"	m
<Plug>(easymotion-tl2)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-tl2) :call EasyMotion#TL(2,0,0)$/;"	m
<Plug>(easymotion-tl2)	Session.vim	/^onoremap <silent> <Plug>(easymotion-tl2) :call EasyMotion#TL(2,0,0)$/;"	m
<Plug>(easymotion-tln)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-tln) :call EasyMotion#TL(-1,0,0)$/;"	m
<Plug>(easymotion-tln)	Session.vim	/^onoremap <silent> <Plug>(easymotion-tln) :call EasyMotion#TL(-1,0,0)$/;"	m
<Plug>(easymotion-tn)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-tn) :call EasyMotion#T(-1,0,0)$/;"	m
<Plug>(easymotion-tn)	Session.vim	/^onoremap <silent> <Plug>(easymotion-tn) :call EasyMotion#T(-1,0,0)$/;"	m
<Plug>(easymotion-vim-N)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-vim-N) :call EasyMotion#Search(0,1,1)$/;"	m
<Plug>(easymotion-vim-N)	Session.vim	/^onoremap <silent> <Plug>(easymotion-vim-N) :call EasyMotion#Search(0,1,1)$/;"	m
<Plug>(easymotion-vim-n)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-vim-n) :call EasyMotion#Search(0,0,1)$/;"	m
<Plug>(easymotion-vim-n)	Session.vim	/^onoremap <silent> <Plug>(easymotion-vim-n) :call EasyMotion#Search(0,0,1)$/;"	m
<Plug>(easymotion-w)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-w) :call EasyMotion#WB(0,0)$/;"	m
<Plug>(easymotion-w)	Session.vim	/^onoremap <silent> <Plug>(easymotion-w) :call EasyMotion#WB(0,0)$/;"	m
<Plug>(easymotion-wl)	Session.vim	/^nnoremap <silent> <Plug>(easymotion-wl) :call EasyMotion#WBL(0,0)$/;"	m
<Plug>(easymotion-wl)	Session.vim	/^onoremap <silent> <Plug>(easymotion-wl) :call EasyMotion#WBL(0,0)$/;"	m
<Plug>(fzf-complete-buffer-line)	Session.vim	/^inoremap <expr> <Plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<Plug>(fzf-complete-file)	Session.vim	/^inoremap <expr> <Plug>(fzf-complete-file) fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print | sed 's:^..::'")$/;"	m
<Plug>(fzf-complete-file-ag)	Session.vim	/^inoremap <expr> <Plug>(fzf-complete-file-ag) fzf#vim#complete#path('ag -l -g ""')$/;"	m
<Plug>(fzf-complete-line)	Session.vim	/^inoremap <expr> <Plug>(fzf-complete-line) fzf#vim#complete#line()$/;"	m
<Plug>(fzf-complete-path)	Session.vim	/^inoremap <expr> <Plug>(fzf-complete-path) fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print | sed '1d;s:^..::'")$/;"	m
<Plug>(fzf-complete-word)	Session.vim	/^inoremap <expr> <Plug>(fzf-complete-word) fzf#vim#complete#word()$/;"	m
<Plug>(fzf-maps-i)	Session.vim	/^inoremap <silent> <Plug>(fzf-maps-i) :call fzf#vim#maps('i', 0)$/;"	m
<Plug>(fzf-maps-n)	Session.vim	/^nnoremap <silent> <Plug>(fzf-maps-n) :call fzf#vim#maps('n', 0)$/;"	m
<Plug>(fzf-maps-o)	Session.vim	/^onoremap <silent> <Plug>(fzf-maps-o) :call fzf#vim#maps('o', 0)$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())$/;"	m
<Plug>NetrwBrowseXVis	Session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<S-Tab>	Session.vim	/^inoremap <S-Tab> $/;"	m
<SNR>93_:	Session.vim	/^nnoremap <SNR>93_: :=v:count ? v:count : ''$/;"	m
M	Session.vim	/^nnoremap M '$/;"	m
PIPE_READ	util.h	/^const int PIPE_READ = 0;$/;"	v
PIPE_WRITE	util.h	/^const int PIPE_WRITE = 1;$/;"	v
Process	running.cpp	/^class Process {$/;"	c	file:
READ_FD	myshell.cpp	/^#define READ_FD /;"	d	file:
READ_FD	testing2.cpp	/^#define READ_FD /;"	d	file:
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
U	Session.vim	/^nnoremap U  $/;"	m
WRITE_FD	myshell.cpp	/^#define WRITE_FD /;"	d	file:
WRITE_FD	testing2.cpp	/^#define WRITE_FD /;"	d	file:
Z	Session.vim	/^nnoremap Z :lnext$/;"	m
\	Session.vim	/^nnoremap \\ za $/;"	m
break_string	util.cpp	/^void break_string(string input, vector<string> * topush, vector<char> dividers,int keep){$/;"	f
break_string	util.cpp	/^void break_string(string input, vector<string> * topush,char divider,int keep){$/;"	f
cleanUpProcess	running.cpp	/^void cleanUpProcess(vector<Process> &processes, vector<Process> &finished, int &jobCounter) {$/;"	f
codes	util.h	/^const string codes[11] = {"cd", "clr", "dir", "environ", "echo", "help", "pause", "quit","|",";","more"};$/;"	v
command	running.cpp	/^    string command;$/;"	m	class:Process	file:
command_code	command_node.h	/^		int command_code;$/;"	m	class:command_node
command_name	command_node.h	/^		std::string command_name;$/;"	m	class:command_node
command_node	command_node.cpp	/^command_node::command_node(std::string input):$/;"	f	class:command_node
command_node	command_node.h	/^class command_node{$/;"	c
error_handler	myshell.cpp	/^int error_handler(){$/;"	f
executeTask	running.cpp	/^void executeTask(vector<string> command) {$/;"	f
find	util.cpp	/^int find(char tofind, vector<char> dividers){$/;"	f
fork_and_execute	myshell.cpp	/^void fork_and_execute(vector<string> * toexec){$/;"	f
fun_ptr_arr	handlerdef.cpp	/^void (*fun_ptr_arr[8])(vector<string> *) = {handle_cd,handle_clear,handle_dir,handle_environ,handle_argcmd,handle_help,handle_pause,handle_argcmd};$/;"	v
get_command	running.cpp	/^        string get_command() { return command; }$/;"	f	class:Process
get_job_number	running.cpp	/^        int get_job_number() { return job_number; }$/;"	f	class:Process
get_pid	running.cpp	/^        pid_t get_pid() { return pid; }$/;"	f	class:Process
gh	Session.vim	/^nnoremap gh :bprev$/;"	m
gl	Session.vim	/^nnoremap gl :bnext$/;"	m
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	Session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
handleBackgroundTask	running.cpp	/^Process handleBackgroundTask(string input, vector<string> tokens, int &jobCounter, string &outputFile, string &inputFile) {$/;"	f
handleChangeDirectory	running.cpp	/^void handleChangeDirectory(vector<string> tokens) {$/;"	f
handleForegroundTask	running.cpp	/^void handleForegroundTask(vector<string> tokens, string &outputFile, string &inputFile) {$/;"	f
handleInput	running.cpp	/^vector<string> handleInput(string input, char delimeter) {$/;"	f
handlePipe	running.cpp	/^void handlePipe(vector<string> tokens) {$/;"	f
handleWait	running.cpp	/^void handleWait(vector<string> tokens, vector<Process> &processes) {$/;"	f
handle_argcmd	handlerdef.cpp	/^void handle_argcmd(string torun){$/;"	f
handle_argcmd	handlerdef.cpp	/^void handle_argcmd(vector<string>* torun){$/;"	f
handle_argcmd_out	handlerdef.cpp	/^void handle_argcmd_out(vector<string>* torun,char **argv[]){$/;"	f
handle_argcmd_pipe	handlerdef.cpp	/^void handle_argcmd_pipe(vector<string>* torun,int fd[],int read_write){$/;"	f
handle_cd	handlerdef.cpp	/^void handle_cd(vector<string>* torun){$/;"	f
handle_clear	handlerdef.cpp	/^void handle_clear(vector<string> * toclear){$/;"	f
handle_dir	handlerdef.cpp	/^void handle_dir(vector<string> * torun){$/;"	f
handle_echo	handlerdef.cpp	/^void handle_echo(vector<string> * toecho){$/;"	f
handle_environ	handlerdef.cpp	/^void handle_environ(vector<string>* torun){$/;"	f
handle_help	handlerdef.cpp	/^void handle_help(vector<string> * tohelp){$/;"	f
handle_noargcmd	handlerdef.cpp	/^void handle_noargcmd(vector<string>* torun){$/;"	f
handle_pause	handlerdef.cpp	/^void handle_pause(vector<string> * tohelp){$/;"	f
identify_string	util.cpp	/^int identify_string(string toID){$/;"	f
jj	Session.vim	/^inoremap jj $/;"	m
job_number	running.cpp	/^    int job_number;$/;"	m	class:Process	file:
main	myshell.cpp	/^int main(int argc, char* argv[]){$/;"	f
main	running.cpp	/^int main() {$/;"	f
main	testing.c	/^int main()$/;"	f
main	testing2.cpp	/^int main() { int fd[2];$/;"	f
main	testing3.cpp	/^int main(int argc, char* argv[])$/;"	f
main	torun.cpp	/^int main(){$/;"	f
makeNewProcess	running.cpp	/^void makeNewProcess(int inFileDescriptor, int outFileDescriptor, vector<string> command) {$/;"	f
next	command_node.h	/^		command_node* next;$/;"	m	class:command_node
parser	myshell.cpp	/^int parser(string toparse){$/;"	f
pid	running.cpp	/^    pid_t pid;$/;"	m	class:Process	file:
prev	command_node.h	/^		command_node* prev;$/;"	m	class:command_node
printProcesses	running.cpp	/^void printProcesses(vector<Process> &processes, vector<Process> &finishedProcesses) {$/;"	f
print_vec	util.cpp	/^void print_vec(vector<string>* toprint){$/;"	f
read_file	util.cpp	/^vector<string> read_file(string filename){$/;"	f
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 1 - ((0 * winheight(0) + 33) \/ 66)$/;"	v
s:l	Session.vim	/^let s:l = 80 - ((47 * winheight(0) + 33) \/ 66)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
set_values	running.cpp	/^void Process::set_values(pid_t p, int n, string c) {$/;"	f	class:Process
t1	Session.vim	/^nnoremap t1 :1gt$/;"	m
t2	Session.vim	/^nnoremap t2 :2gt$/;"	m
t3	Session.vim	/^nnoremap t3 :3gt$/;"	m
t4	Session.vim	/^nnoremap t4 :4gt$/;"	m
t5	Session.vim	/^nnoremap t5 :5gt$/;"	m
t6	Session.vim	/^nnoremap t6 :6gt$/;"	m
tc	Session.vim	/^nnoremap tc :tabclose$/;"	m
th	Session.vim	/^nnoremap th :tabprev $/;"	m
tl	Session.vim	/^nnoremap tl :tabnext $/;"	m
tm	Session.vim	/^nnoremap tm :tab sp$/;"	m
wait_for_input	myshell.cpp	/^string wait_for_input(){$/;"	f
write_to_file	util.cpp	/^void write_to_file(int fd[]){$/;"	f
zt	Session.vim	/^normal! zt$/;"	m
